name: EC2 Instance State
on:
  workflow_dispatch:
    inputs:
      instanceState:
        description: 'State of the EC2 Instance'  
        required: true 
      name:
        description: 'Name of the EC2 Instance'  
        required: true 
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  stop_instance:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.instanceState == 'stop' }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Set up SSH key
      run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.instancePublicIP }} >> ~/.ssh/known_hosts
    
    - name: SSH into VM
      run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} ' ls -la'

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Copy all bash scripts to VM
      run: |
          scp *.sh ubuntu@${{ secrets.instancePublicIP }}:/home/ubuntu
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} 'ls -la'
    
    - name: stop instance
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
      run: |
         ssh -v -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} "sudo kubectl get managed | grep ${{ github.event.inputs.name}} | awk '{ print \$4 }'" > instance-id.txt 
         aws ec2 stop-instances --instance-ids $(cat instance-id.txt) 


  start_instance:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.instanceState == 'start' }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Set up SSH key
      run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.instancePublicIP }} >> ~/.ssh/known_hosts
    
    - name: SSH into VM
      run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} ' ls -la'

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Copy all bash scripts to VM
      run: |
          scp *.sh ubuntu@${{ secrets.instancePublicIP }}:/home/ubuntu
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} 'ls -la'
    
    - name: start instance
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
      run: |
        aws ec2 start-instances --instance-ids ${{ github.event.inputs.instanceID }} 

  reboot_instance:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.instanceState == 'reboot' }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Set up SSH key
      run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.instancePublicIP }} >> ~/.ssh/known_hosts
    
    - name: SSH into VM
      run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} ' ls -la'

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Copy all bash scripts to VM
      run: |
          scp *.sh ubuntu@${{ secrets.instancePublicIP }}:/home/ubuntu
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} 'ls -la'
    
    - name: reboot instance
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
      run: |
        aws ec2 reboot-instances --instance-ids ${{ github.event.inputs.instanceID }} 



  delete_instance:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.instanceState == 'delete' }}
    steps:
    - name: Set up SSH key
      run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.instancePublicIP }} >> ~/.ssh/known_hosts
    
    - name: SSH into VM
      run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} ' ls -la'

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Copy all bash scripts to VM
      run: |
          scp *.sh ubuntu@${{ secrets.instancePublicIP }}:/home/ubuntu
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} 'ls -la'
    
    - name: Execute the transferred scripts within VM
      run: |
           ssh -v -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} "bash login_argocd.sh"

    - name: Retrieve the Argocd Password       
      run: |
           mkdir -p artifacts
           ssh -v -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} "kubectl get secrets -n argocd argocd-initial-admin-secret -o=jsonpath={.data.password} | base64 -d" > artifacts/pswd.txt
    
    
   
    - name: delete instance
      run: |
         ssh -v -i ~/.ssh/id_rsa ubuntu@${{ secrets.instancePublicIP }} "sudo argocd app delete ${{ github.event.inputs.name }}"
     
    

   
      

  
    
   
  
